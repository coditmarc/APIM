# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the DEV branch
  push:
    branches: [ DEV ]
  pull_request:
    branches: [ DEV ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  deployment:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env: 
      ResourceGroupName: APIM-deployment-DEV
      ResourceGroupLocation: "westeurope"

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@master
      
      - name: Azure Blob Upload
        # You may pin to the exact commit or the version.
        # uses: LanceMcCarthy/Action-AzureBlobUpload@26fb96f6797ff678fb467954a1dae74fe17bcef9
        uses: LanceMcCarthy/Action-AzureBlobUpload@v1.8.2
        with:
          # Azure Storage ConnectionString for the container (Azure Portal - select Storage Account - Access Keys blade).
          connection_string: ${{ secrets.AZURE_BLOBSTORAGE }}
          # Blob Container name (e.g. my-container).
          container_name: githubactiondeploy
          # The local folder containing all the files and subfolders to upload to the blob container (use a trailing slash)
          source_folder: .
          # The target folder to use in the blob container with (do not use a leading or trailing slash)
          destination_folder: . # optional
          # This option will delete all the blobs in destination_folder before uploading the new files
          clean_destination_folder: true  # optional
          # If you want the Action to fail and report an error if the source_folder is empty.
          fail_if_source_empty: true # optional
          # Set to false if you want all subfolders ignored.
          is_recursive: true # optional, default is true
      - name: Azure Login
        uses: Azure/login@v1
        with:
          # Paste output of `az ad sp create-for-rbac` as value of secret variable: AZURE_CREDENTIALS
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - uses: Azure/CLI@v1
        with:
          inlineScript: |
            #!/bin/bash
            if $(az group exists --name ${{ env.ResourceGroupName }}) ; then
              echo "Azure resource group already exists, skipping creation..."
            else
              az group create --name ${{ env.ResourceGroupName }} --location ${{ env.ResourceGroupLocation }}
              echo "Azure resource group created"
            fi

      - name: Deploy Azure Resource Manager (MASTER) Template
        uses: Azure/arm-deploy@v1
        with:
          # Provide the scope of the deployment. Valid values are: 'resourcegroup', 'managementgroup', 'subscription'
          # scope: resourcegroup
          # Provide the name of a resource group, only required for resource Group deployments.
          # Specify the path or URL to the Azure Resource Manager template.
          # Incremental (only add resources to resource group) or Complete (remove extra resources from resource group) or Validate (only validates the template).
          # deploymentMode: Incremental
          # Specifies the name of the resource group deployment to create.
          # deploymentName: # optional
          # Supply deployment parameter values.
          # parameters: # optional
          subscriptionId: ${{ secrets.SUBSCRIPTION_ID }}
          resourceGroupName: APIM-deployment-DEV
          template: ./arm.json
          parameters: ./parameters.json
              
